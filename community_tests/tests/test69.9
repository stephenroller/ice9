# int function prototype

type array2 = int[10]
var s : array2

proc int2(iSize : int, pcStr : array2) : int
	var bPos : bool
	var iTemp : int
	
	bPos := true;
	int2 := 0;
	
	if iSize = 0 ->
		return;
	fi
	
	iTemp := 0;
	fa i := 0 to iSize-1 ->
		if (pcStr[i] = 43) + (pcStr[i] = 45) + ((pcStr[i] >= 48) * (pcStr[i] <= 57)) ->
			break;
		fi
		iTemp := iTemp + 1;
	af

	if iTemp = iSize ->
		return;
	fi    

    if pcStr[iTemp] = 45 ->
		bPos := false;
		iTemp := iTemp + 1;
	[] pcStr[iTemp] = 43 ->
		iTemp := iTemp + 1;
	fi
	
	if iTemp = iSize ->
		return;
	fi
	
	fa j := iTemp to iSize-1 ->
		if (pcStr[j] < 48) + (pcStr[j] > 57) ->
			break;
		fi
		
		int2 := 10 * int2 + pcStr[j] - 48;
	af

    if -bPos ->
		int2 := -int2;
    fi
end

s[0]:= 32; # space
s[1]:= 45; # -
s[2]:= 49; # 1
s[3]:= 48; # 0
s[4]:= 32; # space
s[5]:= 49; # 1 - overflow for error checking

write int2(5, s);

s[0]:= 49; # 1
s[1]:= 48; # 0
s[2]:= 49; # 1 - overflow for error checking

write int2(2, s);

s[0]:= 49; # 1
s[1]:= 48; # 0
s[2]:= 32; # space
s[3]:= 49; # 1 - overflow for error checking

write int2(3, s);

s[0]:= 49; # 1
s[1]:= 45; # -
s[2]:= 48; # 0
s[3]:= 49; # 1 - overflow for error checking

write int2(3, s);

write int2(0, s);

s[0]:= 45; # -
s[1]:= 49; # 1 - overflow for error checking

write int2(1, s);

s[0]:= 97; # a
s[1]:= 98; # b
s[2]:= 99; # c
s[3]:= 49; # 1 - overflow for error checking

write int2(3, s);
