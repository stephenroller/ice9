# first simple expression tests
# +
1 plus, and logical or										succeed
2 plus/logical or failure on mixed types (bool + int)		fail
3 plus/logical or failure on mixed types (int + bool)		fail
4 plus/logical or failure on mixed types (string + int)		fail
# *
5 mult and logical and										succeed
6 mult, and logical and failure on mixed types (bool + int) fail
7 mult, and logical and failure on mixed types (int + bool) fail
8 mult, and logical and failure on mixed types (bool + str) fail
# binary -
9 binary - with ints										succeed
10 binary - with bools										fail
11 binary - with mixed types (ints & bools)					fail
12 binary - with mixed types (string & int)					fail
# /
13 / with ints												succeed
14 / with bools												fail
15 / with mixed types (int & bool)							fail
16 / with mixed types (int & string)						fail
# =
17 = with ints and bools									succeed
18 = with mixed types (int & bool)							fail
19 = with mixed types (bool & int)							fail
20 = with mixed types (bool & string)						fail
21 = nested error  "int = (int = int)"						fail
# !=
22 != with ints and bools									succeed
23 != with mixed types (int & bool)							fail
24 != with mixed types (bool & int)							fail
25 != with mixed types (bool & string)						fail
26 != nested error  "int != (int != int)"					fail
# >
27 > with int												succeed
28 > with bool												fail
29 > with mixed (int & bool)								fail
# <
30 < with int												succeed
31 < with bools												fail
32 < with mixed (int & string)								fail
# >=
33 >= with int												succeed
34 >= with bools											fail
35 >= with mixed (int & bool)								fail
# <=
36 <= with int												succeed
37 <= with bools											fail
38 <= with mixed (int & bool)								fail
# %
39 % with int												succeed
40 % with bools												fail
41 % with mixed (int & string)								fail
# ?
42 ? with bool												succeed
43 ? with int												fail
44 ? with string											fail
# unary -
45 unary - with int, bool									succeed
46 unary with string										fail
# combo tests
47 mixed expression tests									succeed
# write and writes
48 write 5+6/3;	write "Hi there"; write "";					succeed
49 write true;												fail
50 writes 5+7; writes " "; writes "Hi There";				succeed
51 writes (2 >= 4);											fail
52 output results from prior successful tests				succeed
# read
53 3 != read;												succeed
54 true = read;												fail
55 read test from grammar									succeed
# 1-level symbol table tests
56 unknown variable test									fail 
# :=
57 simple symbol table tests & := type checking (int, bool & str)succeed
58 int := bool												fail
59 bool := int												fail
60 int := string											fail
# misc
61 stand alone lvalue test									succeed
62 solo ';' test											succeed
# if tests
63 if bool -> ; fi											succeed
64 if int -> ; fi											fail
65 if string -> ; fi										fail
66 if bool + - bool -> ; fi									succeed
67 if (int < int) -> ; fi									succeed
68 if false -> ; [] true -> ; fi							succeed
69 if true -> ; [] int -> ; fi								fail
70 if false -> ; [] false -> ; [] else -> ; fi				succeed
71 if test from spec										fail
# do tests
72 do true -> ; od											succeed
73 do 1 -> ; od												fail
74 do "Hi" -> ; od											fail
75 var a : int \n do a -> ; od								fail
76 var a : int \n a := 0; do a < 5 -> a := a + 1; od		succeed
# break tests
77 break alone												fail
78 break in a do loop										succeed
79 break w/ two do loops									succeed
# fa tests
80 fa i := 0 to 1 -> write i; af							succeed
81 test hiding of previously defined var					succeed
82 fa i := true to 1 -> ; af								fail
83 fa i := 0 to true -> ; af								fail
84 fa i := 0 to ?true -> ; af								succeed
85 fa i := 0 to 10 -> break; af								succeed
86 break with two fa loops									succeed
87 fa i := 0 to 10 -> i := 2; af							fail
88 fa with big if											succeed
89 two loops with same var									succeed
90 fa i := 0 to -10 -> ; af									succeed
91 fa i := 'hi' to 'there' -> ; af							fail
92 fa i := 0 to 0 -> write i; af							succeed
93 break w/in inner of two loops							succeed
94 break in [] clause										succeed
95 break in else clause										succeed
# simple typeid tests
96 use a new type name										succeed
97 use an unknown type										fail
98 redefine int												fail
# type tests
99 type foo = int[3]; var foo : foo foo[0] := 0; ...		succeed
100 type foo : int type foo : bool ;						fail
101 type foo : int type bar foo[3] var bar : bar ...		succeed
102	creating a type with an unknown type					fail
# lvalue/type tests
103 type foo = int[2] var a : foo[2] a := 0;				fail
104 type foo = int[2] var a : foo[2] a[0] := 0;				fail
105 type foo = int[2] var a : foo[2] a[0][0] := 0;			succeed
106 type foo = int[2] var a : foo[2] a[0][0][0] := 0;		fail
107 type foo = int[2] var a : foo a := 0;					fail
108 type foo = int[2] var a : foo a[0] := 0;				succeed
109 type foo = int[2] var a : foo a[0][0] := 0				fail
110 type foo = int[2] var a : foo a[0][0][0] := 0			fail
111 var a : int[2] a := 0;									fail
112 var a : int[2] a[0] := 0;								succeed
113 var a : int[2] a[0][0] := 0;							fail
114 var a : int[2] a[0][0][0] := 0;							fail
115 var a : int[2] a[0] := a;								fail
116 var a : int[2] a[0] := 1; a[1] := -a[0];				succeed
117 var a : int[2] a[0] := a[0][0];							fail
118 var a : int[2] a['j'] := 0;								fail
119 var a : int[2] a[true] := 0;							fail
120 var a : int[2] a[?true] := 0;							succeed
# missing basic tests
121 plus/logical or failure on disallowed type (string)		fail
122 plus/logical or failure on disallowed type (arrays)		fail
123 mult/logical and failure on disallowed type (string)	fail
124 mult/logical and failure on disallowed type (arrays)	fail
125 = failure on disallowed type (string)					fail
126 = failure on disallowed type (arrays)					fail
127 != failure on disallowed type (string)					fail
128 != failure on disallowed type (arrays)					fail
129 := failure on disallowed type (arrays)					fail
130 lingering access to fa loop variable					fail
131 apparently I can't count								succeed
132 type foo = int[2] type bar = foo[2] var b : bar b := 0; fail
133 type foo = int[2] type bar = foo[2] var b : bar b[0] := 0; fail
134 type foo = int[2] type bar = foo[2] var b : bar b[0][0] := 0; succeed
135 type foo = int[2] type bar = foo[2] var b : bar b[0][0][0] := 0; fail
136 type foo = int[0]										fail
137 var b : int[0]											fail
138 var a,b : int[1], c,d : bool[0]							fail
139 var a,b : int, c,d : bool a := 0; b := 1; d := true;	succeed
140 type foo = int[2] type bar = int[2] var a : foo var b : bar a[0] := b[0]; succeed
# exit & return
141 exit from loop											succeed
142 return from	w/in a loop									succeed
# simple forward tests
143 forward int(s: str) ;									fail
144 forward foo() ;											success
145 forward foo(a, b : int) ;								success
146 forward foo(a : int, b : bool) ;						success
147 forward foo() forward foo() ;							fail
148 forward foo() : int ;									success
# int proc tests
149 var i : int i := int("3");								success
150 var b : bool b := int("3");								fail
151 var s : str s := int("3");								fail
152 var i : int i := int(true);								fail
153 var i : int i := int(3);								fail
154 var i : int var a : int[2] i := int(a);					fail
155 int("3");												success
156 var i : int i := int();									fail
# proc w/ forward tests
157 unknown proc call										fail
158 int("a", "b");											fail
159 proc different from forward (# params)					fail
160 proc different from forward (types)						fail
161 proc different from forward (return type)				fail
162 2 procs w/ same name									fail
163 forward & 2 procs w/ same name							fail
# proc scope tests
164 ref to parameter										succeed
165 ref to two parameters									succeed
166 ref to four parameters									succeed
167 proc w/ array params									succeed
168 double defined param									fail
169 trailing reference to proc parameter					fail

219 first example from spec clarification					succeed
220 second example from spec clarification					succeed
221 third example from spec clarification					fail
222 subtle test from forum (proc a(a : int) : int)			fail
223 large expression tests									succeed
224 int test from spec										succeed
225 mutual recursion										succeed
226 proc call w/ too few params								fail
227 proc call w/ too many params							fail
228 type with unknown type									fail
229 proc list test											succeed
230 var list test											succeed
231 x [y [z[a]] [0]] [0] [0] := 0;							succeed
232 proc overriding global scope w/ param					succeed
233 proc overriding global scope w/ var						succeed
234 proc overriding global type								succeed
235 forward & proc have diff names							succeed
236 test recursive function	call							succeed
237 forward w/o proc										fail
238 check scope of fa loop variable							fail
239 double check array := array fails						fail
240 double check := of aliased basic types					succeed
241 test a lingering type ref								fail
242 test array size aspect of type							fail
243 type checking example from forum						succeed
244 redefining non-returning proc's name					succeed
245 array size order test									succeed
246 proc var override failure								fail
247 fa & proc overriding prior loop variable defns			succeed
248 test override of user defined type in a proc			succeed
249 override int, bool & str in a proc						succeed
250-256 provided examples									succeed



